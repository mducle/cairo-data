diff --git a/swfiles/@spinw/powspec.m b/swfiles/@spinw/powspec.m
index 6f6e9fd..7d9523d 100644
--- a/swfiles/@spinw/powspec.m
+++ b/swfiles/@spinw/powspec.m
@@ -284,6 +284,9 @@ end
 % lambda value for SCGA, empty will make integration in first loop
 specQ.lambda = [];
 
+if param.imagChk < 0
+    ioMax = 0;
+end
 for ii = 1:nQ
     if param.fibo
         Q = QF*hklA(ii);
@@ -321,6 +324,9 @@ for ii = 1:nQ
     specQ = sw_egrid(specQ,struct('Evect',param.Evect,'T',param.T,'binType',param.binType,...
     'imagChk',param.imagChk,'component',param.component),'noCheck');
     powSpec(:,ii) = sum(specQ.swConv,2)/param.nRand;
+    if param.imagChk < 0
+        ioMax = ioMax + specQ.ioMax;
+    end
     sw_timeit(ii/nQ*100,0,param.tid);
 end
 
@@ -355,6 +361,10 @@ switch funIdx
         spectra.lambda   = specQ.lambda;
 end
 
+if param.imagChk < 0
+    spectra.ioMax = ioMax;
+end
+
 end
 
 function [F,F1] = fibonacci(Fmax)
diff --git a/swfiles/sw_egrid.m b/swfiles/sw_egrid.m
index 797f57d..6f0ebf4 100644
--- a/swfiles/sw_egrid.m
+++ b/swfiles/sw_egrid.m
@@ -419,9 +419,15 @@ if isfield(spectra,'omega')
         ioMax = max(abs(imag(omega{1}(:))));
         
         if ioMax > max(abs(dE(:)))
-            error('egrid:BadSolution',['The imaginary part of the spin '...
-                'wave energes is larger than the bin size! Improve '...
-                'your calculation or disable imagChk option!']);
+            if param.imagChk < 0
+                spectra.ioMax = ioMax;
+            else
+                error('egrid:BadSolution',['The imaginary part of the spin '...
+                    'wave energes is larger than the bin size! Improve '...
+                    'your calculation or disable imagChk option!']);
+            end
+        else
+            spectra.ioMax = 0;
         end
     end
     
diff --git a/swfiles/@spinw/fitspec.m b/swfiles/@spinw/fitspec.m
index ddf3718..938c0d2 100644
--- a/swfiles/@spinw/fitspec.m
+++ b/swfiles/@spinw/fitspec.m
@@ -89,7 +89,11 @@ function fitsp = fitspec(obj, varargin)
 % 
 % `'imagChk'`
 % : Checks that the imaginary part of the spin wave dispersion is
-%   smaller than the energy bin size. Default is `true`.
+%   smaller than the energy bin size. 
+%   If false, will not check
+%   If 'penalize' will apply a penalty to iterations that yield imaginary modes
+%   If true, will stop the fit if an iteration gives imaginary modes
+%   Default is `penalize`.
 % 
 % Parameters for visualizing the fit results:
 % 
@@ -179,8 +183,8 @@ inpForm.size   = [inpForm.size   {[1 1]  [1 1]    [1 1]    [1 1]   [1 -7]     }]
 inpForm.soft   = [inpForm.soft   {false  false    false    false   false      }];
 
 inpForm.fname  = [inpForm.fname  {'maxiter' 'sw'  'optmem' 'tid' 'imagChk'}];
-inpForm.defval = [inpForm.defval {20        1     0        tid0   true    }];
-inpForm.size   = [inpForm.size   {[1 1]  	[1 1] [1 1]    [1 1]  [1 1]   }];
+inpForm.defval = [inpForm.defval {20        1     0        tid0  'penalize'}];
+inpForm.size   = [inpForm.size   {[1 1]  	[1 1] [1 1]    [1 1]  [1 -8]  }];
 inpForm.soft   = [inpForm.soft   {false  	false false    false  false   }];
 
 param = sw_readparam(inpForm, varargin{:});
@@ -212,6 +216,15 @@ param0      = param;
 param0.plot = false;
 param0.tid  = 0;
 
+% Parses the imagChk parameter - we need to set it to true/false for spinw.spinwave()
+if strncmp(param.imagChk, 'penalize', 1)
+    param0.imagChk = true;
+    param0.penalize_imag = true;
+else
+    param0.imagChk = logical(param.imagChk(1));
+    param0.penalize_imag = false;
+end
+
 x     = zeros(nRun,nPar);
 redX2 = zeros(nRun,1);
 
@@ -330,7 +343,6 @@ function [yCalc, pHandleOut] = spec_fitfun(obj, dataCell, parfunc, x, param)
 
 param.nPoints = 50;
 
-
 parfunc(obj,x);
 
 % Number of different correlation functions measured.
@@ -351,7 +363,19 @@ for ii = 1:nConv
     % calculate neutron scattering cross section
     spec = sw_neutron(spec,'n',data.n,'pol',data.corr.type{1}(1) > 1);
     % bin the data along energy
-    spec = sw_egrid(spec,'component',data.corr,'Evect',param.Evect,'imagChk',param.imagChk);
+    try
+        spec = sw_egrid(spec,'component',data.corr,'Evect',param.Evect,'imagChk',param.imagChk);
+    catch ex
+        % If we get imaginary modes, set all bins to zero to get high Rw
+        if strcmp(ex.identifier, 'egrid:BadSolution') && param.penalize_imag
+            spec.Evect = param.Evect;
+            spec.swConv = zeros(numel(spec.Evect)-1, size(spec.Sperp, 2));
+            spec.swInt = spec.Sperp;
+            spec.component = 'Sperp';
+        else
+            rethrow(ex);
+        end
+    end
     % generate center bin
     spec.Evect = (spec.Evect(1:(end-1))+spec.Evect(2:end))/2;
     
@@ -487,4 +511,4 @@ phi = linspace(0,2*pi,N);
 
 points = R*(a*cos(phi)+b*sin(phi))+repmat(r0,1,N);
 
-end
\ No newline at end of file
+end
diff --git a/swfiles/sw_readspec.m b/swfiles/sw_readspec.m
index e0fd52c..122bb7f 100644
--- a/swfiles/sw_readspec.m
+++ b/swfiles/sw_readspec.m
@@ -133,8 +133,9 @@ while ~feof(fid)
         
         % sort intensity, put zero intensities to the end
         [data{polIdx}.I,idx] = sort(data{polIdx}.I,1,'descend');
-        data{polIdx}.E       = data{polIdx}.E(sub2ind(size(data{polIdx}.E),idx,repmat(1:size(data{polIdx}.E,2),[2 1])));
-        data{polIdx}.sigma   = data{polIdx}.sigma(sub2ind(size(data{polIdx}.E),idx,repmat(1:size(data{polIdx}.E,2),[2 1])));
+        nModes = size(data{polIdx}.I, 1);
+        data{polIdx}.E       = data{polIdx}.E(sub2ind(size(data{polIdx}.E), idx, repmat(1:size(data{polIdx}.E,2), [nModes 1])));
+        data{polIdx}.sigma   = data{polIdx}.sigma(sub2ind(size(data{polIdx}.E), idx, repmat(1:size(data{polIdx}.E,2), [nModes 1])));
         
         data{polIdx}.nMode = sum(data{polIdx}.I~=0,1);
         data{polIdx}.corr  = sw_parstr(modeStr{polIdx});
@@ -151,4 +152,4 @@ end
 
 fclose(fid);
 
-end
\ No newline at end of file
+end
